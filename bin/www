#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('20220503:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Integrating Socket.IO
const { Server } = require("socket.io");
const { resourceUsage } = require('process');
const io = new Server(server);

var jogadasp1 = '';
var jogadasp2 = '';
var pontosp1 = 0;
var pontosp2 = 0;
var rodada = 1;
var numerojogadores = 0;
var player = 1;
var maxplayer = 0;

io.on('connection', (socket) => {
  console.log('usuario conectado');
  if (player == 1) {
    player++;
  } else if (player == 2) {
    player = 1;
  }
  if(numerojogadores<2){
    socket.emit('verificarjogador',true);
    numerojogadores++;
  } else {
    socket.emit('verificarjogador',false);
  }
  socket.emit('user', player);
  socket.on('decisaop1', (decisaop1) => {
    jogadasp1 = decisaop1;
    console.log('p1 server'+decisaop1);
    verifica();
  });
  socket.on('decisaop2', (decisaop2) => {
    jogadasp2 = decisaop2;
    console.log('p2 server'+decisaop2);
    verifica();
  });
  function verifica () {
    if (jogadasp1 && jogadasp2) {
      var vencedor = 0;
      if (jogadasp1 == jogadasp2) {
        vencedor = 0;
      } else if (jogadasp1 == 'Pedra' && jogadasp2 == 'Tesoura') {
        vencedor = 1;
        pontosp1++;
      } else if (jogadasp1 == 'Papel' && jogadasp2 == 'Pedra') {
        vencedor = 1;
        pontosp1++;
      } else if (jogadasp1 == 'Tesoura' && jogadasp2 == 'Papel') {
        vencedor = 1;
        pontosp1++;
      } else if (jogadasp1 == 'Tesoura' && jogadasp2 == 'Pedra') {
        vencedor = 2;
        pontosp2++;
      } else if (jogadasp1 == 'Pedra' && jogadasp2 == 'Papel') {
        vencedor = 2;
        pontosp2++;
      } else if (jogadasp1 == 'Papel' && jogadasp2 == 'Tesoura') {
        vencedor = 2;
        pontosp2++;
      }
      rodada++;
      console.log('vencedor'+vencedor);
      io.emit('vencedor',[vencedor,pontosp1,pontosp2,rodada]);
    }
  }
  socket.on('resetar',function resetar(resetar){
    resetado = resetar;
    vencedor = 0;
    jogadasp1 = '';
    jogadasp2 = '';
    socket.emit('resetado',resetado);
    socket.broadcast.emit('resetado',resetado);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
